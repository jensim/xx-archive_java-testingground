buildscript {
	ext {
		kotlinVersion = '1.1.61'
		springBootVersion = '2.0.0.M6'
		vaadinSpringBootStarterVersion = '2.0.1'
		vaadinBomVersion = '8.1.6'

		gradeleDockerVersion = '1.2'

		junitVersion = '4.12'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("se.transmode.gradle:gradle-docker:${gradeleDockerVersion}")
	}
}

configurations {
	dev
}

group = 'jensim'

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: "io.spring.dependency-management"


springBoot {
//	mainClass = 'se.jensim.MyApplicationKt'
}

jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile("com.vaadin:vaadin-spring-boot-starter:${vaadinSpringBootStarterVersion}")
	compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("junit:junit:${junitVersion}")

	dev("org.springframework.boot:spring-boot-devtools")
}

dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:${vaadinBomVersion}"
	}
}

bootRun {
	// Use Spring Boot DevTool only when we run Gradle bootRun task
	//classpath = sourceSets.main.runtimeClasspath + configurations.dev
}

task buildDocker(type: Docker, dependsOn: build) {
	push = true
	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}
